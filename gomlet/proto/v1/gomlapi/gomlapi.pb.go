// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/v1/gomlapi/gomlapi.proto

package gomlapi

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("proto/v1/gomlapi/gomlapi.proto", fileDescriptor_8397f317276c93d3) }

var fileDescriptor_8397f317276c93d3 = []byte{
	// 454 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x94, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0x55, 0x0e, 0x54, 0x33, 0xea, 0x0a, 0x46, 0x54, 0x22, 0xfb, 0x03, 0x74, 0x0c, 0x44,
	0x05, 0x36, 0x2b, 0x07, 0x10, 0x47, 0x0a, 0xea, 0x05, 0x71, 0xa0, 0x37, 0x2e, 0x53, 0xda, 0xbc,
	0x0d, 0x11, 0x8d, 0xdf, 0x10, 0xbf, 0x45, 0x9a, 0xa6, 0x71, 0x40, 0x20, 0x71, 0xe7, 0x4b, 0x71,
	0xe7, 0x2b, 0xf0, 0x41, 0x26, 0x3b, 0x76, 0xd7, 0x25, 0x4b, 0x73, 0x49, 0x94, 0x3c, 0x6f, 0x9e,
	0xdf, 0x4f, 0xb1, 0x65, 0xb6, 0x9f, 0xe5, 0x48, 0x28, 0xbf, 0x1d, 0xc9, 0x18, 0xd3, 0x45, 0x98,
	0x25, 0xfe, 0x2e, 0x6c, 0xc0, 0x3b, 0xf6, 0x26, 0xdc, 0xcb, 0xe0, 0xb0, 0x6e, 0xfc, 0xd9, 0x0c,
	0xd3, 0x14, 0x55, 0xf1, 0x55, 0xb0, 0x1b, 0x23, 0xc6, 0x0b, 0x90, 0x66, 0x20, 0x54, 0x0a, 0x29,
	0xa4, 0x04, 0x95, 0x76, 0xe9, 0x8e, 0x4b, 0xed, 0xd3, 0x74, 0x39, 0x97, 0x90, 0x66, 0x74, 0x52,
	0x84, 0xc3, 0xbf, 0x6d, 0xd6, 0x1e, 0x17, 0x9d, 0xfc, 0x98, 0x6d, 0x4d, 0x80, 0x46, 0xa8, 0xe6,
	0x49, 0xcc, 0xef, 0x89, 0x4b, 0x2a, 0x62, 0x95, 0x7c, 0x84, 0xaf, 0x4b, 0xd0, 0x14, 0xf4, 0x44,
	0xd1, 0x2b, 0x7c, 0xaf, 0x78, 0x67, 0x7a, 0xfb, 0x77, 0x7f, 0xfc, 0xfb, 0xff, 0xe7, 0xda, 0xed,
	0x60, 0xdb, 0x68, 0x1b, 0xa3, 0x99, 0xfd, 0xec, 0x75, 0x6b, 0xc0, 0xe7, 0x6c, 0x6b, 0x0c, 0x34,
	0x39, 0xd1, 0x04, 0x69, 0x05, 0xb0, 0x4a, 0x3c, 0xe0, 0x7e, 0xfd, 0x80, 0xce, 0x50, 0x69, 0xe8,
	0xf7, 0x2c, 0xea, 0x26, 0x5f, 0xa1, 0x74, 0x51, 0xfd, 0x85, 0xdd, 0x18, 0x03, 0x7d, 0xc0, 0x08,
	0xde, 0x27, 0x9a, 0xf8, 0x83, 0x6a, 0x91, 0xcf, 0x3c, 0xab, 0xbf, 0x69, 0xc4, 0xd1, 0xee, 0x58,
	0x5a, 0x97, 0x77, 0x3c, 0x4d, 0x61, 0x04, 0x9a, 0xa7, 0xac, 0xed, 0xa6, 0xf9, 0xde, 0xd5, 0x2d,
	0x1e, 0xb2, 0x5f, 0x17, 0x3b, 0xc0, 0x81, 0x05, 0xec, 0xf1, 0x9d, 0x75, 0x80, 0x3c, 0x35, 0xd7,
	0xe3, 0x30, 0x8a, 0x72, 0xd0, 0xfa, 0x8c, 0x7f, 0x67, 0xdd, 0x51, 0x0e, 0x21, 0xc1, 0x08, 0x15,
	0x85, 0x89, 0x82, 0x9c, 0x1f, 0x96, 0x7a, 0x4b, 0xb9, 0xc7, 0x3f, 0x6a, 0x1a, 0x73, 0x1a, 0xbb,
	0x56, 0xa3, 0xd7, 0xbf, 0xb5, 0xb6, 0x80, 0xc5, 0x88, 0x59, 0xc3, 0xdf, 0x2d, 0xb6, 0x3d, 0xa1,
	0x30, 0xa7, 0x0b, 0xfe, 0xc3, 0xf2, 0x56, 0xb9, 0x14, 0x37, 0xed, 0x97, 0x57, 0x16, 0x37, 0x0c,
	0x9e, 0x57, 0x70, 0x52, 0x9b, 0x22, 0xf7, 0x03, 0x92, 0xe8, 0x4c, 0x9e, 0xae, 0x22, 0xf3, 0xc8,
	0x7f, 0xb5, 0x58, 0x67, 0x42, 0x98, 0x5d, 0x98, 0x1c, 0x54, 0x4c, 0xd6, 0xd2, 0x26, 0x91, 0x97,
	0x56, 0xe4, 0x28, 0x90, 0x57, 0x89, 0x60, 0x56, 0xef, 0xf1, 0xb3, 0xc5, 0xba, 0x6f, 0x61, 0x01,
	0x9b, 0xd6, 0xa4, 0x94, 0x37, 0xb9, 0x0c, 0xad, 0xcb, 0xd3, 0xc1, 0xa0, 0xea, 0x52, 0xa7, 0xf1,
	0xe6, 0xc9, 0xa7, 0xc7, 0x71, 0x42, 0x9f, 0x97, 0x53, 0x31, 0xc3, 0xd4, 0x1e, 0x14, 0xf6, 0x02,
	0x24, 0xcb, 0xa7, 0xc8, 0xf4, 0xba, 0x7d, 0xf3, 0xe2, 0x3c, 0x00, 0x00, 0xff, 0xff, 0x56, 0xd8,
	0x8a, 0x0c, 0x8f, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GomlapiClient is the client API for Gomlapi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GomlapiClient interface {
	// Goml의 시스템 정보를 설정합니다.
	SetConfig(ctx context.Context, in *SetConfigRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Goml 시스템의 상태를 조회합니다.
	GetSystem(ctx context.Context, in *GetSystemRequest, opts ...grpc.CallOption) (*GetSystemResponse, error)
	// Node 목록을 조회합니다.
	GetNodeList(ctx context.Context, in *GetNodeListRequest, opts ...grpc.CallOption) (*GetNodeListResponse, error)
	// Node를 조회합니다.
	GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*GetNodeResponse, error)
	// Node에 컨테이너를 생성합니다.
	CreateContainer(ctx context.Context, in *CreateContainerRequest, opts ...grpc.CallOption) (*CreateContainerResponse, error)
	// 컨테이너를 시작합니다.
	StartContainer(ctx context.Context, in *StartContainerRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// 컨테이너를 중지합니다.
	StopContainer(ctx context.Context, in *StopContainerRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// 컨테이너를 삭제합니다.
	DeleteContainer(ctx context.Context, in *DeleteContainerRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type gomlapiClient struct {
	cc *grpc.ClientConn
}

func NewGomlapiClient(cc *grpc.ClientConn) GomlapiClient {
	return &gomlapiClient{cc}
}

func (c *gomlapiClient) SetConfig(ctx context.Context, in *SetConfigRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.gomlapi.Gomlapi/SetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gomlapiClient) GetSystem(ctx context.Context, in *GetSystemRequest, opts ...grpc.CallOption) (*GetSystemResponse, error) {
	out := new(GetSystemResponse)
	err := c.cc.Invoke(ctx, "/proto.gomlapi.Gomlapi/GetSystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gomlapiClient) GetNodeList(ctx context.Context, in *GetNodeListRequest, opts ...grpc.CallOption) (*GetNodeListResponse, error) {
	out := new(GetNodeListResponse)
	err := c.cc.Invoke(ctx, "/proto.gomlapi.Gomlapi/GetNodeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gomlapiClient) GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*GetNodeResponse, error) {
	out := new(GetNodeResponse)
	err := c.cc.Invoke(ctx, "/proto.gomlapi.Gomlapi/GetNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gomlapiClient) CreateContainer(ctx context.Context, in *CreateContainerRequest, opts ...grpc.CallOption) (*CreateContainerResponse, error) {
	out := new(CreateContainerResponse)
	err := c.cc.Invoke(ctx, "/proto.gomlapi.Gomlapi/CreateContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gomlapiClient) StartContainer(ctx context.Context, in *StartContainerRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.gomlapi.Gomlapi/StartContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gomlapiClient) StopContainer(ctx context.Context, in *StopContainerRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.gomlapi.Gomlapi/StopContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gomlapiClient) DeleteContainer(ctx context.Context, in *DeleteContainerRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.gomlapi.Gomlapi/DeleteContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GomlapiServer is the server API for Gomlapi service.
type GomlapiServer interface {
	// Goml의 시스템 정보를 설정합니다.
	SetConfig(context.Context, *SetConfigRequest) (*empty.Empty, error)
	// Goml 시스템의 상태를 조회합니다.
	GetSystem(context.Context, *GetSystemRequest) (*GetSystemResponse, error)
	// Node 목록을 조회합니다.
	GetNodeList(context.Context, *GetNodeListRequest) (*GetNodeListResponse, error)
	// Node를 조회합니다.
	GetNode(context.Context, *GetNodeRequest) (*GetNodeResponse, error)
	// Node에 컨테이너를 생성합니다.
	CreateContainer(context.Context, *CreateContainerRequest) (*CreateContainerResponse, error)
	// 컨테이너를 시작합니다.
	StartContainer(context.Context, *StartContainerRequest) (*empty.Empty, error)
	// 컨테이너를 중지합니다.
	StopContainer(context.Context, *StopContainerRequest) (*empty.Empty, error)
	// 컨테이너를 삭제합니다.
	DeleteContainer(context.Context, *DeleteContainerRequest) (*empty.Empty, error)
}

// UnimplementedGomlapiServer can be embedded to have forward compatible implementations.
type UnimplementedGomlapiServer struct {
}

func (*UnimplementedGomlapiServer) SetConfig(ctx context.Context, req *SetConfigRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConfig not implemented")
}
func (*UnimplementedGomlapiServer) GetSystem(ctx context.Context, req *GetSystemRequest) (*GetSystemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystem not implemented")
}
func (*UnimplementedGomlapiServer) GetNodeList(ctx context.Context, req *GetNodeListRequest) (*GetNodeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeList not implemented")
}
func (*UnimplementedGomlapiServer) GetNode(ctx context.Context, req *GetNodeRequest) (*GetNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNode not implemented")
}
func (*UnimplementedGomlapiServer) CreateContainer(ctx context.Context, req *CreateContainerRequest) (*CreateContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContainer not implemented")
}
func (*UnimplementedGomlapiServer) StartContainer(ctx context.Context, req *StartContainerRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartContainer not implemented")
}
func (*UnimplementedGomlapiServer) StopContainer(ctx context.Context, req *StopContainerRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopContainer not implemented")
}
func (*UnimplementedGomlapiServer) DeleteContainer(ctx context.Context, req *DeleteContainerRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContainer not implemented")
}

func RegisterGomlapiServer(s *grpc.Server, srv GomlapiServer) {
	s.RegisterService(&_Gomlapi_serviceDesc, srv)
}

func _Gomlapi_SetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GomlapiServer).SetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.gomlapi.Gomlapi/SetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GomlapiServer).SetConfig(ctx, req.(*SetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gomlapi_GetSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GomlapiServer).GetSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.gomlapi.Gomlapi/GetSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GomlapiServer).GetSystem(ctx, req.(*GetSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gomlapi_GetNodeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GomlapiServer).GetNodeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.gomlapi.Gomlapi/GetNodeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GomlapiServer).GetNodeList(ctx, req.(*GetNodeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gomlapi_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GomlapiServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.gomlapi.Gomlapi/GetNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GomlapiServer).GetNode(ctx, req.(*GetNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gomlapi_CreateContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GomlapiServer).CreateContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.gomlapi.Gomlapi/CreateContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GomlapiServer).CreateContainer(ctx, req.(*CreateContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gomlapi_StartContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GomlapiServer).StartContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.gomlapi.Gomlapi/StartContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GomlapiServer).StartContainer(ctx, req.(*StartContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gomlapi_StopContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GomlapiServer).StopContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.gomlapi.Gomlapi/StopContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GomlapiServer).StopContainer(ctx, req.(*StopContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gomlapi_DeleteContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GomlapiServer).DeleteContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.gomlapi.Gomlapi/DeleteContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GomlapiServer).DeleteContainer(ctx, req.(*DeleteContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gomlapi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.gomlapi.Gomlapi",
	HandlerType: (*GomlapiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetConfig",
			Handler:    _Gomlapi_SetConfig_Handler,
		},
		{
			MethodName: "GetSystem",
			Handler:    _Gomlapi_GetSystem_Handler,
		},
		{
			MethodName: "GetNodeList",
			Handler:    _Gomlapi_GetNodeList_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _Gomlapi_GetNode_Handler,
		},
		{
			MethodName: "CreateContainer",
			Handler:    _Gomlapi_CreateContainer_Handler,
		},
		{
			MethodName: "StartContainer",
			Handler:    _Gomlapi_StartContainer_Handler,
		},
		{
			MethodName: "StopContainer",
			Handler:    _Gomlapi_StopContainer_Handler,
		},
		{
			MethodName: "DeleteContainer",
			Handler:    _Gomlapi_DeleteContainer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1/gomlapi/gomlapi.proto",
}
