// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/v1/gomlet/gomlet.proto

package gomlet

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("proto/v1/gomlet/gomlet.proto", fileDescriptor_28c76a641a9f5673) }

var fileDescriptor_28c76a641a9f5673 = []byte{
	// 287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x31, 0x4f, 0xf3, 0x30,
	0x10, 0x86, 0x3b, 0x7c, 0xea, 0x27, 0x59, 0x94, 0x4a, 0x1e, 0x18, 0x42, 0x58, 0x52, 0x40, 0x2c,
	0x38, 0x02, 0xfe, 0x01, 0x05, 0x85, 0x05, 0x10, 0x74, 0xeb, 0x84, 0x53, 0x8e, 0x10, 0x29, 0xf1,
	0x99, 0xf8, 0x82, 0xc4, 0xcc, 0x1f, 0x47, 0x75, 0x62, 0xd2, 0x18, 0x68, 0x26, 0x2b, 0xef, 0x73,
	0x7e, 0xf2, 0xca, 0x3a, 0x16, 0xea, 0x0a, 0x09, 0xe3, 0xf7, 0xb3, 0x38, 0xc3, 0xb2, 0x00, 0x6a,
	0x0f, 0x61, 0x63, 0xbe, 0x63, 0x0f, 0xd1, 0x64, 0xc1, 0xec, 0xf7, 0xd9, 0xd3, 0x15, 0x96, 0x25,
	0xaa, 0xe6, 0x4a, 0x10, 0x66, 0x88, 0x59, 0x01, 0xb1, 0xd4, 0x79, 0x2c, 0x95, 0x42, 0x92, 0x94,
	0xa3, 0x32, 0x2d, 0xdd, 0x6f, 0xa9, 0xfd, 0x4a, 0xeb, 0x97, 0x18, 0x4a, 0x4d, 0x1f, 0x0d, 0x3c,
	0xff, 0xfc, 0xc7, 0xc6, 0x89, 0x55, 0xf2, 0x25, 0x9b, 0x24, 0x40, 0x73, 0x54, 0x24, 0x73, 0x05,
	0x95, 0xe1, 0x91, 0xd8, 0xac, 0x22, 0x7a, 0xf0, 0x11, 0xde, 0x6a, 0x30, 0x14, 0xcc, 0xb6, 0xce,
	0x18, 0x8d, 0xca, 0x40, 0x34, 0xe2, 0xf7, 0x6c, 0x77, 0x41, 0xb2, 0xea, 0x20, 0xf7, 0x2e, 0xf6,
	0xa9, 0xb3, 0xef, 0x89, 0xa6, 0xbb, 0x70, 0xdd, 0xc5, 0xf5, 0xba, 0x7b, 0x34, 0xe2, 0xb7, 0x6c,
	0xb2, 0x20, 0xd4, 0x9d, 0x2f, 0xf2, 0x7d, 0x1b, 0x70, 0x58, 0xf7, 0xc0, 0xa6, 0x57, 0x50, 0x00,
	0x41, 0x27, 0x3c, 0xec, 0x0b, 0x3d, 0x3c, 0xac, 0xbc, 0x61, 0xff, 0x13, 0xa0, 0x3b, 0x7c, 0x06,
	0x1e, 0xfe, 0x78, 0xa4, 0x75, 0xec, 0x14, 0x07, 0x7f, 0xd0, 0xef, 0xc7, 0x7b, 0x62, 0xd3, 0x79,
	0x05, 0x72, 0x4b, 0x39, 0x0f, 0x3b, 0xf3, 0xd1, 0xc0, 0x94, 0xfb, 0xc3, 0xe5, 0xc9, 0xf2, 0x38,
	0xcb, 0xe9, 0xb5, 0x4e, 0xc5, 0x0a, 0x4b, 0xbb, 0x62, 0x6e, 0xdd, 0xbc, 0xf5, 0x4b, 0xc7, 0x36,
	0xb8, 0xf8, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x5f, 0xa2, 0x30, 0xdc, 0xc4, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GomletClient is the client API for Gomlet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GomletClient interface {
	// 실행중인 컨테이너를 조회합니다.
	GetContainers(ctx context.Context, in *GetContainersRequest, opts ...grpc.CallOption) (*GetContainersResponse, error)
	// 컨테이너를 시작합니다.
	StartContainer(ctx context.Context, in *StartContainerRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// 컨테이너를 중지합니다.
	StopContainer(ctx context.Context, in *StopContainerRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// 컨테이너를 삭제합니다.
	DeleteContainer(ctx context.Context, in *DeleteContainerRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Node 정보를 조회합니다.
	GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*GetNodeResponse, error)
	// 컨테이너를 생성합니다.
	CreateContainer(ctx context.Context, in *CreateContainerRequest, opts ...grpc.CallOption) (*CreateContainerResponse, error)
}

type gomletClient struct {
	cc *grpc.ClientConn
}

func NewGomletClient(cc *grpc.ClientConn) GomletClient {
	return &gomletClient{cc}
}

func (c *gomletClient) GetContainers(ctx context.Context, in *GetContainersRequest, opts ...grpc.CallOption) (*GetContainersResponse, error) {
	out := new(GetContainersResponse)
	err := c.cc.Invoke(ctx, "/proto.gomlet.Gomlet/GetContainers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gomletClient) StartContainer(ctx context.Context, in *StartContainerRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.gomlet.Gomlet/StartContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gomletClient) StopContainer(ctx context.Context, in *StopContainerRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.gomlet.Gomlet/StopContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gomletClient) DeleteContainer(ctx context.Context, in *DeleteContainerRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.gomlet.Gomlet/DeleteContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gomletClient) GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*GetNodeResponse, error) {
	out := new(GetNodeResponse)
	err := c.cc.Invoke(ctx, "/proto.gomlet.Gomlet/GetNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gomletClient) CreateContainer(ctx context.Context, in *CreateContainerRequest, opts ...grpc.CallOption) (*CreateContainerResponse, error) {
	out := new(CreateContainerResponse)
	err := c.cc.Invoke(ctx, "/proto.gomlet.Gomlet/CreateContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GomletServer is the server API for Gomlet service.
type GomletServer interface {
	// 실행중인 컨테이너를 조회합니다.
	GetContainers(context.Context, *GetContainersRequest) (*GetContainersResponse, error)
	// 컨테이너를 시작합니다.
	StartContainer(context.Context, *StartContainerRequest) (*empty.Empty, error)
	// 컨테이너를 중지합니다.
	StopContainer(context.Context, *StopContainerRequest) (*empty.Empty, error)
	// 컨테이너를 삭제합니다.
	DeleteContainer(context.Context, *DeleteContainerRequest) (*empty.Empty, error)
	// Node 정보를 조회합니다.
	GetNode(context.Context, *GetNodeRequest) (*GetNodeResponse, error)
	// 컨테이너를 생성합니다.
	CreateContainer(context.Context, *CreateContainerRequest) (*CreateContainerResponse, error)
}

// UnimplementedGomletServer can be embedded to have forward compatible implementations.
type UnimplementedGomletServer struct {
}

func (*UnimplementedGomletServer) GetContainers(ctx context.Context, req *GetContainersRequest) (*GetContainersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContainers not implemented")
}
func (*UnimplementedGomletServer) StartContainer(ctx context.Context, req *StartContainerRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartContainer not implemented")
}
func (*UnimplementedGomletServer) StopContainer(ctx context.Context, req *StopContainerRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopContainer not implemented")
}
func (*UnimplementedGomletServer) DeleteContainer(ctx context.Context, req *DeleteContainerRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContainer not implemented")
}
func (*UnimplementedGomletServer) GetNode(ctx context.Context, req *GetNodeRequest) (*GetNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNode not implemented")
}
func (*UnimplementedGomletServer) CreateContainer(ctx context.Context, req *CreateContainerRequest) (*CreateContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContainer not implemented")
}

func RegisterGomletServer(s *grpc.Server, srv GomletServer) {
	s.RegisterService(&_Gomlet_serviceDesc, srv)
}

func _Gomlet_GetContainers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContainersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GomletServer).GetContainers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.gomlet.Gomlet/GetContainers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GomletServer).GetContainers(ctx, req.(*GetContainersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gomlet_StartContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GomletServer).StartContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.gomlet.Gomlet/StartContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GomletServer).StartContainer(ctx, req.(*StartContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gomlet_StopContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GomletServer).StopContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.gomlet.Gomlet/StopContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GomletServer).StopContainer(ctx, req.(*StopContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gomlet_DeleteContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GomletServer).DeleteContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.gomlet.Gomlet/DeleteContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GomletServer).DeleteContainer(ctx, req.(*DeleteContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gomlet_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GomletServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.gomlet.Gomlet/GetNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GomletServer).GetNode(ctx, req.(*GetNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gomlet_CreateContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GomletServer).CreateContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.gomlet.Gomlet/CreateContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GomletServer).CreateContainer(ctx, req.(*CreateContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gomlet_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.gomlet.Gomlet",
	HandlerType: (*GomletServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetContainers",
			Handler:    _Gomlet_GetContainers_Handler,
		},
		{
			MethodName: "StartContainer",
			Handler:    _Gomlet_StartContainer_Handler,
		},
		{
			MethodName: "StopContainer",
			Handler:    _Gomlet_StopContainer_Handler,
		},
		{
			MethodName: "DeleteContainer",
			Handler:    _Gomlet_DeleteContainer_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _Gomlet_GetNode_Handler,
		},
		{
			MethodName: "CreateContainer",
			Handler:    _Gomlet_CreateContainer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1/gomlet/gomlet.proto",
}
